import java_cup.runtime.*;
import java.util.*;
import java.io.*;

action code {:

	Tabla tabla;
  double prob;

	void inicializar() {
		tabla = new Tabla();
    prob = 0;
	}

	boolean existeSimbolo(String id) {
		return tabla.existeSimbolo(id);
	}

	void addSimbolo(String id) {
		tabla.addSimbolo(id);
	}

  void sumProb(double p){
    prob = prob + p;
  }
:}

parser code {:
    public static void main(String args[]) throws Exception {
        // La clase Yylex es creada por el analizador lï¿½xico
        new parser(new Yylex(System.in)).parse();
    }

    public void report_error(String message) {
  		System.err.println(message);
  	}

  	// Muestra un error de sintaxis
  	public void syntax_error(Symbol actual) {
  		if (actual.sym == sym.EOF)
  			report_error("Intruccion incompleta en linea : "+InformacionCodigo.linea+
  				       " Caracter: "+ InformacionCodigo.caracter + " Token : "+InformacionCodigo.token);
  		else
  			report_error("Error sintactico en linea : "+InformacionCodigo.linea+
  				       " Caracter: "+ InformacionCodigo.caracter + " Token : "+InformacionCodigo.token);
  	}

  	// Muestra el texto de un error irrecuperable
  	public void report_fatal_error(String message, Object info) {
  		System.err.println(message);
  	}

  	// Muestra un mensaje cuando no se puede seguir analizando
  	public void unrecovered_syntax_error(Symbol actual) {
  	}

  	//Muestra un mensaje de error con linea, token y mensaje
  	public void error(String mensaje) {
  		report_error("ERROR: Linea:"+InformacionCodigo.linea+" Caracter: "+InformacionCodigo.caracter+" "+mensaje);
  	}
:}

terminal TKLIN
        ,TKSECC_GRAM
        ,TKSECC_COND
        ,TKSECC_FIN
        ,TKKEYW_PARAM
        ,TKKEYW_VALOR
        ,TKKEYW_SIMBO
        ,TKKEYW_PASOS
        ,TKKEYW_ANGUL
        ,TKKEYW_POSIC
        ,TKKEYW_MATRI
        ,TKKEYW_GENER
        ,TKKEYW_PROBA
        ,TKTYPE_ENT
        ,TKTYPE_REAL
        ,TKPAR_O
        ,TKPAR_C
        ,TKCOMA
        ,TKDDOT
        ,TKBRAC_O
        ,TKBRAC_C
        ,TKDLINE
        ,TKARRW
        ,TKASSIGN
        ,TKMOVD
        ,TKMOVND
        ,TKMOVR
        ,TKMOVL
        ,TKPLUS
        ,TKMIN
        ,TKTIMES
        ,TKDIV
        ,TKEXP
        ,TKORD_L
        ,TKORD_R
        ,TKORD_E
        ,TKLOG_AND
        ,TKLOG_OR
        ,TKLOG_DIF
        ,TKTRUE
        ,TKFALSE;

terminal String TKTIT;
terminal Integer TKINT;
terminal double TKREAL;
terminal String TKIDPAR;
terminal String TKSIMID;

/* Lista de no terminales. */

non terminal Program,Tittle,Gram_sect,Gram_body,Param_list,Param,Expr
            ,Simbol_list,Simbol,Simbol_param_list,Cond_sect,Cond_body
            ,Cond_pasos,Cond_angul,Cond_posicion,Cond_pos_punto,Cond_pos_angul
            ,Cond_matriz,Mov_list,Matriz_mov,Mov_d,Mov_nd,Mov_r,Mov_l,Mov_simbol
            ,Mov_simbol_param_list,Cond_gener,Gener_list,Gener,Gener_NP,Gener_P,Expr_logic,
            Comp_real;

precedence left TKASSIGN;
precedence left TKLOG_AND,TKLOG_OR,TKLOG_DIF;
precedence left TKORD_E,TKORD_L,TKORD_R;
precedence left TKEXP;
precedence left TKPLUS,TKMIN;
precedence left TKTIMES,TKDIV;
precedence left TKPAR_O,TKPAR_C;
precedence left TKDLINE;
precedence left TKBRAC_O,TKBRAC_C;

start with Program;

Program ::= {:
			inicializar();
		 :} Tittle TKLIN Gram_sect TKLIN Cond_sect TKSECC_FIN
     {:
       if (prob != 1 && prob != 0) {
         parser.error("La sumatoria de probabilidades no es 1 (Total "+(prob)+")");
       }
     :};

Tittle ::= TKTIT;

Gram_sect ::= TKSECC_GRAM Gram_body;

Gram_body ::= Param_list Simbol_list
            | Param_list
            | Simbol_list;

Param_list ::= Param_list Param
             | Param;

Param ::= TKKEYW_PARAM TKIDPAR:id TKDDOT TKTYPE_ENT TKKEYW_VALOR TKINT
          {:
            if(existeSimbolo(id)) {
              parser.error("Parametro " + id + " redefinido");
            } else {
              addSimbolo(id);
            }
          :}
        | TKKEYW_PARAM TKIDPAR:id TKDDOT TKTYPE_REAL TKKEYW_VALOR TKREAL
          {:
            if(existeSimbolo(id)) {
              parser.error("Parametro " + id + " redefinido");
            } else {
              addSimbolo(id);
            }
          :}
        | TKKEYW_PARAM TKIDPAR:id TKDDOT TKTYPE_REAL TKASSIGN Expr
          {:
            if(existeSimbolo(id)) {
              parser.error("Parametro " + id + " redefinido");
            } else {
              addSimbolo(id);
            }
          :};

Simbol_list ::= Simbol_list Simbol
              | Simbol;

Simbol ::= TKKEYW_SIMBO TKSIMID:id TKPAR_O Simbol_param_list TKPAR_C
              {:
                if(existeSimbolo(id)) {
                  parser.error("Simbolo " + id + " redefinido");
                } else {
                  addSimbolo(id);
                }
              :}
           | TKKEYW_SIMBO TKSIMID:id
             {:
               if(existeSimbolo(id)) {
                 parser.error("Simbolo " + id + " redefinido");
               } else {
                 addSimbolo(id);
               }
             :};

Simbol_param_list ::= Simbol_param_list TKCOMA TKIDPAR:id
              {:
                if(existeSimbolo(id)) {
                  parser.error("Simbolo " + id + " redefinido");
                } else {
                  addSimbolo(id);
                }
              :}
              | TKIDPAR:id
              {:
                if(existeSimbolo(id)) {
                  parser.error("Simbolo " + id + " redefinido");
                } else {
                  addSimbolo(id);
                }
              :};

Cond_sect ::= TKSECC_COND Cond_body;

Cond_body ::= Cond_pasos Cond_angul Cond_posicion TKLIN Cond_matriz TKLIN Cond_gener;

Cond_pasos ::= TKKEYW_PASOS TKINT:val
            {:
              if(val < 0) {
                parser.error("Valor de Paso debe de ser mayor a 0 (Encontrado: " + val + ")");
              }
            :};

Cond_angul ::= TKKEYW_ANGUL TKINT:val
            {:
                if(val < 0 || val > 90){
                  parser.error("Valor de Agulo debe de ser entre 0 y 90 (Encontrado: " + val + ")");
                }
            :};

Cond_posicion ::= TKKEYW_POSIC Cond_pos_punto Cond_pos_angul;

Cond_pos_punto ::= TKPAR_O Comp_real TKCOMA Comp_real TKPAR_C;

Cond_pos_angul ::= TKINT:val
            {:
                if(val < 0 || val > 180){
                  parser.error("Valor de Posicion debe de ser entre 0 y 90 (Encontrado: " + val + ")");
                }
            :};

Cond_matriz ::= TKKEYW_MATRI Mov_list;

Mov_list ::= Mov_list Matriz_mov
           | Matriz_mov;

Matriz_mov ::= Matriz_mov TKDLINE Matriz_mov
             | TKBRAC_O Matriz_mov TKBRAC_C
             | Mov_d
             | Mov_nd
             | Mov_r
             | Mov_l;

Mov_d ::= TKMOVD Mov_simbol;
Mov_nd ::= TKMOVND Mov_simbol;
Mov_r ::= TKMOVR;
Mov_l ::= TKMOVL;

Mov_simbol ::= TKSIMID:id TKPAR_O Mov_simbol_param_list TKPAR_C
            {:
              if(!existeSimbolo(id)) {
                parser.error("Simbolo " + id + " no definido");
              }
            :}
         | TKSIMID:id
           {:
             if(!existeSimbolo(id)) {
               parser.error("Simbolo " + id + " no definido");
             }
           :};

Mov_simbol_param_list ::= Mov_simbol_param_list TKCOMA Expr
                    | Expr;

Cond_gener ::= TKKEYW_GENER Gener_list;

Gener_list ::= Gener_list Gener
             | Gener;

Gener ::= Gener_NP TKLIN
        | Gener_P TKLIN;

Gener_NP ::= Mov_simbol TKDDOT Expr_logic TKARRW Mov_list
           | Mov_simbol TKARRW Mov_list;

Gener_P ::= Mov_simbol TKARRW TKKEYW_PROBA TKREAL:p Mov_list
          {:
            sumProb(p);
          :};

Expr ::= Expr TKPLUS Expr
            | Expr TKMIN Expr
            | Expr TKTIMES Expr
            | Expr TKDIV Expr
            | Expr TKEXP Expr
            | TKMIN Expr
            | TKINT
            | TKREAL
            | TKIDPAR:id
              {:
                if(!existeSimbolo(id)) {
                  parser.error("Parametro " + id + " no definido");
                }
              :}
            | TKPAR_O Expr TKPAR_C;

Expr_logic ::= Expr_logic TKORD_L Expr_logic
            | Expr_logic TKORD_R Expr_logic
            | Expr_logic TKORD_E Expr_logic
            | Expr_logic TKLOG_AND Expr_logic
            | Expr_logic TKLOG_OR Expr_logic
            | Expr_logic TKLOG_DIF Expr_logic
            | TKPAR_O Expr_logic TKPAR_C
            | TKFALSE
            | TKTRUE
            | TKINT
            | TKREAL
            | TKIDPAR:id
              {:
                if(!existeSimbolo(id)) {
                  parser.error("Parametro " + id + " no definido");
                }
              :};

Comp_real ::= TKMIN TKREAL
          | TKREAL;
